{"version":3,"file":"static/js/207.c39707c2.chunk.js","mappings":"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","sources":["webpack://front/./src/components/ChatWindow/ChatWindow.module.scss?4944","components/ChatWindow/ChatWindow.js","pages/ChatPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ChatWindow_container__j9qJm\",\"textPage\":\"ChatWindow_textPage__uIro-\",\"divDiv\":\"ChatWindow_divDiv__E09-F\",\"message\":\"ChatWindow_message__Eg67v\",\"currentUser\":\"ChatWindow_currentUser__Ms2t6\",\"otherUser\":\"ChatWindow_otherUser__Edmli\",\"form\":\"ChatWindow_form__VW2S4\",\"wrapperButtons\":\"ChatWindow_wrapperButtons__JbqzJ\",\"button\":\"ChatWindow_button__UOlt8\",\"imgUser\":\"ChatWindow_imgUser__1VWJY\",\"textMessage\":\"ChatWindow_textMessage__5Q7Qb\"};","import React, { useEffect, useState, useRef  } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {sessionUserRequest} from \"../../slices/userSlices\";\r\nimport {requestCreateChat, requestAddMessages,requestGetMessages} from \"../../slices/chatSlices\";\r\nimport cx from \"classnames\";\r\nimport styles from \"./ChatWindow.module.scss\";\r\nimport { Formik } from 'formik';\r\nimport { Form } from 'formik';\r\nimport { Field } from 'formik';\r\nimport LogoRobot1 from '../../logo/LogoRobot1.jpg';\r\nimport LogoRobot2 from '../../logo/LogoRobot2.png';\r\n\r\n\r\nconst ChatWindow = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const user = useSelector((state)=>state.users.users);\r\n  const chat = useSelector((state)=>state.chats.chat);\r\n  const messages = useSelector((state)=>state.chats.messages);\r\n  const bot1 = useSelector((state)=>state.chats.bot1);\r\n  const bot2 = useSelector((state)=>state.chats.bot2);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    dispatch(sessionUserRequest());\r\n    dispatch(requestCreateChat());\r\n  }, [dispatch]);\r\n  \r\n  useEffect(() => {\r\n    if (chat) {\r\n      dispatch(requestGetMessages({ chatId: chat }));\r\n    }\r\n  }, [dispatch, chat]); \r\n  useEffect(() => {\r\n    if (user.id) {\r\n      SetActiveUserId(user.id);\r\n  \r\n    }\r\n  }, [user.id]);\r\n\r\n  const [activeUserid, SetActiveUserId] = useState(user.id);\r\n\r\n  const switchUser = (userId) => {\r\n    // console.log(userId)\r\n    SetActiveUserId(userId);\r\n  };\r\n  \r\n  const onSubmit = (values, formikBag) => {\r\n    dispatch(requestAddMessages({text: values.text, userId: activeUserid, chatId: chat}));\r\n    formikBag.resetForm();\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  \r\n  return (\r\n    <div className={styles.container}> \r\n      <h2 className={styles.textPage} >Choose who you want to be</h2>\r\n      <div className={styles.wrapperButtons}>\r\n        <button className={styles.button} onClick={() => switchUser(user.id)}> <img className={styles.imgUser} src={user.imgPath} /> {user.name}</button>\r\n        <button className={styles.button} onClick={() => switchUser(2)}><img className={styles.imgUser} src={LogoRobot2} /> {bot1.name}</button>\r\n        <button className={styles.button} onClick={() => switchUser(3)}><img className={styles.imgUser} src={LogoRobot1} /> {bot2.name}</button>\r\n      </div>\r\n  \r\n \r\n  \r\n      <div className={styles.divDiv}>\r\n        {messages.map((message) => {\r\n          const isCurrentUser = message.userId === activeUserid;\r\n          \r\n          const messageClass = cx(styles.message, {\r\n            [styles.currentUser]: isCurrentUser,\r\n            [styles.otherUser]: !isCurrentUser\r\n          });\r\nlet bot;\r\n          if(message.userId === 2){\r\n             bot = LogoRobot2;\r\n          };\r\n          if(message.userId === 3){\r\n             bot = LogoRobot1;\r\n          }\r\n\r\n          return (\r\n            <div key={message.id} className={messageClass}>\r\n              \r\n             <h2 className={styles.textMessage} ><img  className={styles.imgUser} src={user.userId === message.userId ? user.imgPath: bot} />{message.text}</h2> \r\n            </div>\r\n          );\r\n        })}\r\n           <div ref={messagesEndRef} />\r\n      </div>\r\n           <Formik\r\n        enableReinitialize\r\n        onSubmit={onSubmit}\r\n        initialValues={{text: ''}}\r\n      >\r\n        {(formikProps) => (\r\n          <Form className={styles.form}>\r\n            <Field type=\"text\" name=\"text\" placeholder=\"TEXT\" className={styles.input} />\r\n            <Field name=\"submit\" type=\"submit\" value=\"Send\" className={styles.button} />\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\nexport default ChatWindow;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from '../context';\r\nimport ChatWindow from '../components/ChatWindow/ChatWindow';\r\n\r\n\r\n\r\nconst ChatPage = () => {\r\n \r\n  const {useSetClassName} = useContext(ThemeContext);\r\n  const {classNamePage} = useSetClassName();\r\n  \r\n\r\n  return (\r\n    <div className={classNamePage()}>\r\n  <ChatWindow/>\r\n    </div>\r\n   \r\n  );\r\n}\r\n\r\nexport default ChatPage;\r\n"],"names":["ChatWindow","dispatch","useDispatch","user","useSelector","state","users","chat","chats","messages","bot1","bot2","messagesEndRef","useRef","useEffect","sessionUserRequest","requestCreateChat","requestGetMessages","chatId","id","SetActiveUserId","activeUserid","useState","switchUser","userId","scrollToBottom","current","scrollIntoView","behavior","_jsxs","className","styles","container","children","_jsx","textPage","wrapperButtons","button","onClick","imgUser","src","imgPath","name","LogoRobot2","LogoRobot1","divDiv","map","message","isCurrentUser","messageClass","cx","currentUser","otherUser","bot","textMessage","text","ref","Formik","enableReinitialize","onSubmit","values","formikBag","requestAddMessages","resetForm","initialValues","formikProps","Form","form","Field","type","placeholder","input","value","ChatPage","useSetClassName","useContext","ThemeContext","classNamePage"],"sourceRoot":""}