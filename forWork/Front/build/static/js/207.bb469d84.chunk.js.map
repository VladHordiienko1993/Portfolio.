{"version":3,"file":"static/js/207.bb469d84.chunk.js","mappings":"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","sources":["webpack://front/./src/components/ChatWindow/ChatWindow.module.scss?4944","components/ChatWindow/ChatWindow.js","pages/ChatPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ChatWindow_container__j9qJm\",\"textPage\":\"ChatWindow_textPage__uIro-\",\"divDiv\":\"ChatWindow_divDiv__E09-F\",\"message\":\"ChatWindow_message__Eg67v\",\"currentUser\":\"ChatWindow_currentUser__Ms2t6\",\"otherUser\":\"ChatWindow_otherUser__Edmli\",\"form\":\"ChatWindow_form__VW2S4\",\"input\":\"ChatWindow_input__t33dD\",\"wrapperButtons\":\"ChatWindow_wrapperButtons__JbqzJ\",\"buttonUser\":\"ChatWindow_buttonUser__Y0Hpf\",\"messageContainer\":\"ChatWindow_messageContainer__V-Lj3\",\"textMessage\":\"ChatWindow_textMessage__5Q7Qb\",\"timestamp\":\"ChatWindow_timestamp__D2C1A\",\"imgUser\":\"ChatWindow_imgUser__1VWJY\",\"inputWrapper\":\"ChatWindow_inputWrapper__9Rd5b\"};","import React, { useEffect, useState, useRef  } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {sessionUserRequest} from \"../../slices/userSlices\";\r\nimport {requestCreateChat, requestAddMessages,requestGetMessages} from \"../../slices/chatSlices\";\r\nimport cx from \"classnames\";\r\nimport styles from \"./ChatWindow.module.scss\";\r\nimport { Formik, Form, Field } from 'formik';\r\nimport LogoRobot1 from '../../logo/LogoRobot1.jpg';\r\nimport LogoRobot2 from '../../logo/LogoRobot2.png';\r\nimport LogoUser from '../../logo/LogoUser.png';\r\n\r\n\r\nconst ChatWindow = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const user = useSelector((state)=>state.users.users);\r\n  const chat = useSelector((state)=>state.chats.chat);\r\n  const messages = useSelector((state)=>state.chats.messages);\r\n  const bot1 = useSelector((state)=>state.chats.bot1);\r\n  const bot2 = useSelector((state)=>state.chats.bot2);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    dispatch(sessionUserRequest());\r\n    dispatch(requestCreateChat());\r\n  }, [dispatch]);\r\n  \r\n  useEffect(() => {\r\n    if (chat) {\r\n      dispatch(requestGetMessages({ chatId: chat }));\r\n    }\r\n  }, [dispatch, chat]); \r\n  useEffect(() => {\r\n    if (user.id) {\r\n      SetActiveUserId(user.id);\r\n  \r\n    }\r\n  }, [user.id]);\r\n\r\n  const [activeUserid, SetActiveUserId] = useState(user.id);\r\n \r\n  const switchUser = (userId) => {\r\n  \r\n    SetActiveUserId(userId);\r\n  };\r\n  \r\n  const onSubmit = (values, formikBag) => {\r\n    dispatch(requestAddMessages({text: values.text, userId: activeUserid, chatId: chat}));\r\n    formikBag.resetForm();\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  \r\n  return (\r\n    <div className={styles.container}> \r\n      <h2 className={styles.textPage} >Choose who you want to be</h2>\r\n      <div className={styles.wrapperButtons}>\r\n        <button className={styles.buttonUser} onClick={() => switchUser(user.id)}> <img className={styles.imgUser} src={user.imgPath || LogoUser} /> {user.name}</button>\r\n        <button className={styles.buttonUser} onClick={() => switchUser(2)}><img className={styles.imgUser} src={LogoRobot2} /> {bot1.name}</button>\r\n        <button className={styles.buttonUser} onClick={() => switchUser(3)}><img className={styles.imgUser} src={LogoRobot1} /> {bot2.name}</button>\r\n      </div>\r\n  \r\n \r\n  \r\n      <div className={styles.divDiv}>\r\n        {messages.map((message) => {\r\n          const isCurrentUser = message.userId === activeUserid;\r\n          \r\n          const messageClass = cx(styles.message, {\r\n            [styles.currentUser]: isCurrentUser,\r\n            [styles.otherUser]: !isCurrentUser\r\n          });\r\nlet bot;\r\n          if(message.userId === 2){\r\n             bot = LogoRobot2;\r\n          };\r\n          if(message.userId === 3){\r\n             bot = LogoRobot1;\r\n          }\r\n\r\n          return (\r\n          //   <div key={message.id} className={messageClass}>\r\n             \r\n          //    <h2 className={styles.textMessage} ><img  className={styles.imgUser} \r\n          //    src={ \r\n          //      message.userId === user.id ? (user.imgPath || LogoUser) :\r\n          //        message.userId === 2 ? LogoRobot2 :\r\n          //       message.userId === 3 ? LogoRobot1 : null}\r\n          //        alt=\"User Avatar\"\r\n          //  />{message.text}</h2> \r\n          //   </div>\r\n\r\n\r\n<div key={message.id} className={messageClass}>\r\n  {console.log(activeUserid)}\r\n  <div className={styles.messageContainer}>\r\n    <h2 className={styles.textMessage}>\r\n      <img\r\n        className={styles.imgUser}\r\n        src={\r\n          message.userId === user.id ? (user.imgPath || LogoUser) :\r\n          message.userId === 2 ? LogoRobot2 :\r\n          message.userId === 3 ? LogoRobot1 : null\r\n        }\r\n        alt=\"User Avatar\"\r\n      />\r\n      {message.text}\r\n    </h2>\r\n    <span className={styles.timestamp}>\r\n      {new Date(message.createdAt).toLocaleTimeString()} \r\n    </span>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n\r\n          );\r\n        })}\r\n           <div ref={messagesEndRef} />\r\n      </div>\r\n           <Formik\r\n        enableReinitialize\r\n        onSubmit={onSubmit}\r\n        initialValues={{text: ''}}\r\n      >\r\n        {(formikProps) => (\r\n          <Form className={styles.form}>\r\n            <div className={styles.inputWrapper}>\r\n              <img className={styles.imgUser} src={ activeUserid === user.id ? (user.imgPath || LogoUser) :\r\n                 activeUserid === 2 ? LogoRobot2 :\r\n                 activeUserid === 3 ? LogoRobot1 : null} />\r\n               <Field type=\"text\" name=\"text\" placeholder=\"TEXT\" className={styles.input} />\r\n            </div>\r\n           \r\n            <Field name=\"submit\" type=\"submit\" value=\"Send\" className={styles.button} />\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\nexport default ChatWindow;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from '../context';\r\nimport ChatWindow from '../components/ChatWindow/ChatWindow';\r\n\r\n\r\n\r\nconst ChatPage = () => {\r\n \r\n  const {useSetClassName} = useContext(ThemeContext);\r\n  const {classNamePage} = useSetClassName();\r\n  \r\n\r\n  return (\r\n    <div className={classNamePage()}>\r\n  <ChatWindow/>\r\n    </div>\r\n   \r\n  );\r\n}\r\n\r\nexport default ChatPage;\r\n"],"names":["ChatWindow","dispatch","useDispatch","user","useSelector","state","users","chat","chats","messages","bot1","bot2","messagesEndRef","useRef","useEffect","sessionUserRequest","requestCreateChat","requestGetMessages","chatId","id","SetActiveUserId","activeUserid","useState","switchUser","userId","scrollToBottom","current","scrollIntoView","behavior","_jsxs","className","styles","container","children","_jsx","textPage","wrapperButtons","buttonUser","onClick","imgUser","src","imgPath","LogoUser","name","LogoRobot2","LogoRobot1","divDiv","map","message","isCurrentUser","messageClass","cx","currentUser","otherUser","bot","console","log","messageContainer","textMessage","alt","text","timestamp","Date","createdAt","toLocaleTimeString","ref","Formik","enableReinitialize","onSubmit","values","formikBag","requestAddMessages","resetForm","initialValues","formikProps","Form","form","inputWrapper","Field","type","placeholder","input","value","button","ChatPage","useSetClassName","useContext","ThemeContext","classNamePage"],"sourceRoot":""}